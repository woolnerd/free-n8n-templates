{
  "nodes": [
    {
      "parameters": {
        "multipleMethods": true,
        "httpMethod": [
          "POST"
        ],
        "path": "c052cef9-d1d9-4828-8fbb-05f3ae267915",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -384,
        -96
      ],
      "id": "26b114ce-914a-49d3-bcb5-5c9a8aac215d",
      "name": "Webhook",
      "webhookId": "c052cef9-d1d9-4828-8fbb-05f3ae267915"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body.message }}",
        "options": {
          "systemMessage": "=You are a helpful and professional real estate assistant named PropBot. Your goal is to accurately provide property information, qualify leads, and schedule viewings. Prioritize clear communication and efficient use of tools. After a task is completed, or if you require more information from the user, provide a direct, concise response.\n\nAvailable Tools & Functions:\n\nfind_property_data(filter_formula: str):\n\nDescription: Searches the real estate database for property information using an Airtable filter formula. The filter_formula must be a valid Airtable formula (e.g., \"{Address}='225 Simons Road, Ancram, NY 12502'\" or AND({Beds}=3, {City}='Scarsdale')). Use this to answer all property-related questions. Returns: Detailed property data if found, or an empty result if not found. Image_Url links can be wrapped like: ![Kitten](https://placekitten.com/200/300) for display.\n\nsend_slack_alert(message: str):\n\nDescription: Sends an immediate alert to the real estate agent's Slack channel. Use this for new lead notifications and confirmed viewing bookings.\n\nfind_calendar_conflicts(start_time: str, end_time: str):\n\nDescription: Checks the agent's Google Calendar for conflicting appointments. start_time and end_time must be in ISO 8601 format (e.g., YYYY-MM-DDTHH:mm:ssZ). Returns: true if there's a conflict, false if available.\n\ncreate_viewing(title: str, start_time: str, end_time: str, description: str, attendees: list):\n\nDescription: Creates a new calendar event for a property viewing. The title should be a concise summary (e.g., \"Viewing: [Property Address]\"). start_time and end_time must be in ISO 8601 format. The attendees list must include the agent's and the user's email addresses. Use ONLY after confirming availability with find_calendar_conflicts and explicit user confirmation.\n\nBehavioral Guidelines (Crucial for Iteration Control):\n\nIntroduction: Greet the user by introducing yourself as PropBot and ask how you can assist.\n\nDirect Answers/Tool Use:\n\nFor property questions, first use find_property_data.\n\nIf property data is found, summarize it clearly and then ask a follow-up question (e.g., \"What else would you like to know or would you like to schedule a viewing?\").\n\nIf property data is NOT found, state \"I couldn't find details for that property. Please provide more specific information, like the full address, or ask about another listing.\" and await user input.\n\nLead Qualification: If the user expresses interest in a viewing, floor plan, or connecting with the agent, you MUST obtain their full name, email, and phone number first. Do not proceed with the request until all three pieces of information are collected.\n\nScheduling Viewings (Strict Sequence):\n\nUser requests viewing: Ask for preferred date and time.\n\nCheck availability: Use find_calendar_conflicts with user-provided start_time and end_time.\n\nIf Conflict: State \"That time is unavailable. Could you suggest an alternative date and time?\" and stop tool use to await user input.\n\nIf Available: State \"That time appears to be available. Please confirm if [Date and Time] works for your viewing of [Property Address].\" Do NOT call create_viewing yet. Stop tool use to await user confirmation.\n\nUser Confirms: ONLY THEN, use create_viewing.\n\nAfter Booking: Immediately use send_slack_alert with viewing details. Then, provide a final confirmation to the user (e.g., \"Your viewing for [Property Address] on [Date and Time] has been confirmed! An email invitation has been sent.\") and terminate the conversation gracefully.\n\nConciseness & Termination:\n\nKeep responses concise.\n\nOnce a user's primary request is fulfilled and you've provided the final answer or action confirmation, conclude the interaction. Avoid asking open-ended questions that might lead to further tool calls if the task is complete.\n\nHandling Out-of-Scope Requests: If a user asks something beyond your tools' capabilities (e.g., \"What are the market trends?\"), state your limitation and offer to pass their details to the human agent: \"I can only provide information from the property database and help schedule viewings. Would you like me to connect you with an agent who can discuss market trends? If so, please provide your contact details.\"\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        64,
        -96
      ],
      "id": "9aca1c1e-a5fc-4cc2-8f8a-d9300406344e",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "openai/o4-mini-high",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -240,
        128
      ],
      "id": "9bd766aa-1d47-4ad7-8983-bd92269c14a2",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "Eua8pv4g3NZyG4tR",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "real-estate-chat",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -80,
        128
      ],
      "id": "f7a4b450-8d51-4d35-8bd3-7b8382670f3b",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  response: $('AI Agent').item.json.output,\n  messageId: \"msg_789\",\n  timestamp: \"2024-01-15T10:30:05Z\",\n  type: \"bot\"\n}) }}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        688,
        -96
      ],
      "id": "4be446d7-3763-430a-89e4-299019e6727d",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appLENKkReVWdxjKL",
          "mode": "list",
          "cachedResultName": "Real Estate",
          "cachedResultUrl": "https://airtable.com/appLENKkReVWdxjKL"
        },
        "table": {
          "__rl": true,
          "value": "tbl5PBDPGQzuE05kp",
          "mode": "list",
          "cachedResultName": "Table 1",
          "cachedResultUrl": "https://airtable.com/appLENKkReVWdxjKL/tbl5PBDPGQzuE05kp"
        },
        "filterByFormula": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Filter_By_Formula', ``, 'string') }}",
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.airtableTool",
      "typeVersion": 2.1,
      "position": [
        64,
        128
      ],
      "id": "e50956a5-4f5b-430d-bd58-b6c088e30055",
      "name": "find_property_data",
      "credentials": {
        "airtableTokenApi": {
          "id": "p0SvtIsYpadCgJxt",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "hello.freetimeai@gmail.com",
          "mode": "list",
          "cachedResultName": "hello.freetimeai@gmail.com"
        },
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "limit": 5,
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        224,
        128
      ],
      "id": "14155565-5b18-4cf2-90bc-25ceb58ed1d0",
      "name": "find_calendar_conflicts",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "m2QOSYrWKNTKRKul",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "hello.freetimeai@gmail.com",
          "mode": "list",
          "cachedResultName": "hello.freetimeai@gmail.com"
        },
        "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
        "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
        "additionalFields": {
          "attendees": [
            "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('attendees0_Attendees', ``, 'string') }}"
          ],
          "description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', ``, 'string') }}",
          "location": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Location', ``, 'string') }}",
          "summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        384,
        128
      ],
      "id": "46ad6102-d209-4a69-a12d-ac2bff4c35de",
      "name": "create_viewing",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "m2QOSYrWKNTKRKul",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C0963KB9XU2",
          "mode": "list",
          "cachedResultName": "propbot-scheduled-viewings"
        },
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message_Text', ``, 'string') }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "type": "n8n-nodes-base.slackTool",
      "typeVersion": 2.3,
      "position": [
        528,
        128
      ],
      "id": "761c39ff-cf0e-4fee-b82f-7f56af810c32",
      "name": "send_slack_alert",
      "webhookId": "c8c4c873-a07d-4b50-a66c-109d4567ad74",
      "credentials": {
        "slackOAuth2Api": {
          "id": "elsYAmN5ggBCHJcn",
          "name": "Slack Users Write"
        }
      }
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "find_property_data": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "find_calendar_conflicts": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "create_viewing": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "send_slack_alert": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Webhook": [
      {
        "headers": {
          "host": "app.nexloop.dev",
          "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36",
          "content-length": "221",
          "accept": "*/*",
          "accept-encoding": "gzip, deflate, br, zstd",
          "accept-language": "en-US,en;q=0.9",
          "content-type": "application/json",
          "origin": "https://www.houlihanlawrence.com",
          "priority": "u=1, i",
          "referer": "https://www.houlihanlawrence.com/",
          "sec-ch-ua": "\"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"",
          "sec-ch-ua-mobile": "?0",
          "sec-ch-ua-platform": "\"macOS\"",
          "sec-fetch-dest": "empty",
          "sec-fetch-mode": "cors",
          "sec-fetch-site": "cross-site",
          "via": "2.0 Caddy",
          "x-forwarded-for": "24.218.20.155",
          "x-forwarded-host": "app.nexloop.dev",
          "x-forwarded-proto": "https"
        },
        "params": {},
        "query": {},
        "body": {
          "message": "could you tell me about 225 Simons Road, Ancram, NY 12502",
          "userId": "user_2q3tndv6i",
          "sessionId": "session_1752779345524_o9gguqeqn",
          "timestamp": "2025-07-17T19:10:08.970Z",
          "userInfo": {
            "userId": "user_2q3tndv6i"
          }
        },
        "webhookUrl": "https://app.nexloop.dev/webhook/c052cef9-d1d9-4828-8fbb-05f3ae267915",
        "executionMode": "production"
      }
    ]
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7a890a0a476a68eaf42214f57390a10af1e99b8c5f18355d477d156ff4eb8462"
  }
}
